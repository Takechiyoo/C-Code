#include<iostream>

using namespace std;

/**
 * You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. 
 * The one who removes the last stone will be the winner. You will take the first turn to remove the stones.
 *
 * Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.
 *For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.
 *
 * 分析：随便举几个例子就可以发现当对方拿了石头之后，如果还剩4个那我必输无疑，否则我就会赢。
 * 所以，如果 n - 4 返回true，那么 n 就返回true。采用递归这样的方法，会超时也不是最简单的办法。 事实上，通过举例子可以发现第一个不满足的就是n=4，也就是说只要是4的倍数，那么必输。
 *
*/
class Solution {
public:

	bool canWinNim(int n) {
		if (n % 4 == 0)
			return false;
		else
			return true;
	}
	/*
	bool canWinNim(int n) {
		if (n == 1 || n == 2 || n == 3)
			return true;
		if (n == 4)
			return false;
		return canWinNim(n - 4);
	}
	*/
};
